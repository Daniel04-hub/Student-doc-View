import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Copy, Check, Download } from "lucide-react";
import { useState } from "react";

// TODO: remove mock functionality
const mockResult = {
  title: "Photosynthesis",
  bullets: [
    "Photosynthesis is the process by which green plants make their own food",
    "Plants use sunlight, carbon dioxide, and water to produce energy in the form of sugar",
    "The process occurs mainly in the leaves, specifically in structures called chloroplasts",
    "Photosynthesis also produces oxygen as a byproduct, which humans and animals need to breathe",
    "This process is essential for life on Earth as it forms the base of most food chains",
  ],
  paragraph: "Photosynthesis is the process by which green plants make their own food. They use sunlight, carbon dioxide, and water to produce energy in the form of sugar. The process occurs mainly in the leaves, specifically in structures called chloroplasts. It also gives out oxygen, which humans and animals need to breathe. This process is essential for all life on Earth.",
  key_terms: [
    { term: "Chlorophyll", definition: "The green pigment in leaves that absorbs sunlight" },
    { term: "Carbon Dioxide", definition: "A gas plants take in from the air" },
    { term: "Glucose", definition: "A type of sugar that plants produce for energy" },
  ],
  shareable_id: "photosynthesis245",
};

interface ResultDisplayProps {
  mode?: "bullets" | "paragraph";
}

export function ResultDisplay({ mode = "bullets" }: ResultDisplayProps) {
  const [copied, setCopied] = useState(false);
  const [downloaded, setDownloaded] = useState(false);

  const handleCopy = () => {
    const link = `${window.location.origin}/result/${mockResult.shareable_id}`;
    navigator.clipboard.writeText(link);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleDownload = () => {
    let content = `DOCUMENT EXPLANATION\n`;
    content += `${"=".repeat(50)}\n\n`;
    content += `Topic: ${mockResult.title}\n\n`;
    
    if (mode === "bullets") {
      content += `KEY POINTS:\n`;
      content += `${"-".repeat(50)}\n`;
      mockResult.bullets.forEach((point, index) => {
        content += `${index + 1}. ${point}\n`;
      });
    } else {
      content += `EXPLANATION:\n`;
      content += `${"-".repeat(50)}\n`;
      content += `${mockResult.paragraph}\n`;
    }
    
    content += `\n\nKEY TERMS:\n`;
    content += `${"-".repeat(50)}\n`;
    mockResult.key_terms.forEach((term) => {
      content += `\n${term.term}:\n  ${term.definition}\n`;
    });
    
    content += `\n\n${"=".repeat(50)}\n`;
    content += `Generated by DocExplainer AI\n`;
    content += `Link: ${window.location.origin}/result/${mockResult.shareable_id}\n`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${mockResult.title.toLowerCase().replace(/\s+/g, '-')}-explanation.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    setDownloaded(true);
    setTimeout(() => setDownloaded(false), 2000);
  };

  return (
    <section className="py-12 md:py-20">
      <div className="container px-4 md:px-6">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">Example Result</h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            See how we transform complex content into clear explanations
          </p>
        </div>

        <Card className="max-w-4xl mx-auto p-6 md:p-8 border-l-4 border-l-primary">
          <div className="space-y-6">
            <div>
              <div className="flex items-center gap-2 mb-2">
                <span className="text-2xl">üìò</span>
                <h3 className="text-2xl font-bold">Topic:</h3>
              </div>
              <p className="text-xl font-serif" data-testid="text-topic">{mockResult.title}</p>
            </div>

            {mode === "bullets" ? (
              <div>
                <div className="flex items-center gap-2 mb-4">
                  <span className="text-2xl">‚≠ê</span>
                  <h3 className="text-xl font-semibold">Key Points:</h3>
                </div>
                <ul className="space-y-3 ml-8">
                  {mockResult.bullets.map((point, index) => (
                    <li key={index} className="flex items-start gap-3" data-testid={`bullet-${index}`}>
                      <span className="text-primary mt-1">‚Ä¢</span>
                      <span className="text-lg leading-relaxed">{point}</span>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <div>
                <div className="flex items-center gap-2 mb-4">
                  <span className="text-2xl">üß©</span>
                  <h3 className="text-xl font-semibold">Simple Explanation:</h3>
                </div>
                <p className="text-lg font-serif leading-relaxed" data-testid="text-explanation">
                  {mockResult.paragraph}
                </p>
              </div>
            )}

            <div>
              <div className="flex items-center gap-2 mb-4">
                <span className="text-2xl">üóùÔ∏è</span>
                <h3 className="text-xl font-semibold">Key Terms:</h3>
              </div>
              <div className="grid gap-4 md:grid-cols-2">
                {mockResult.key_terms.map((term, index) => (
                  <div 
                    key={index}
                    className="rounded-lg bg-chart-3/10 p-4"
                    data-testid={`term-${index}`}
                  >
                    <div className="font-semibold text-chart-3 mb-1">{term.term}</div>
                    <div className="text-sm text-muted-foreground">{term.definition}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="pt-4 border-t flex flex-wrap items-center justify-between gap-4">
              <div className="flex items-center gap-2">
                <span className="text-xl">üîó</span>
                <span className="text-sm text-muted-foreground">Shareable Link:</span>
                <Badge variant="outline" data-testid="text-share-id">
                  /result/{mockResult.shareable_id}
                </Badge>
              </div>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleDownload}
                  data-testid="button-download"
                >
                  {downloaded ? (
                    <>
                      <Check className="h-4 w-4 mr-2" />
                      Downloaded!
                    </>
                  ) : (
                    <>
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </>
                  )}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleCopy}
                  data-testid="button-copy-link"
                >
                  {copied ? (
                    <>
                      <Check className="h-4 w-4 mr-2" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="h-4 w-4 mr-2" />
                      Copy Link
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </section>
  );
}
